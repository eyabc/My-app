@startuml SchedulerDomain

!define SERVICE_COLOR #E8F5E8
!define VALUE_OBJECT_COLOR #E1F5FE
!define REPOSITORY_COLOR #FFF3E0

package "Scheduling Domain" {

  class ScheduleTask <<Entity>> SERVICE_COLOR {
    -taskId: String
    -notificationId: String
    -nextRunAt: LocalDateTime
    -pattern: SchedulePattern
    -status: TaskStatus
    +calculateNextRun(): void
    +updateStatus(status: TaskStatus): void
  }

  class SchedulePattern <<ValueObject>> VALUE_OBJECT_COLOR {
    +type: RecurrenceType
    +interval: Integer?
    +daysOfWeek: List<DayOfWeek>?
    +timeOfDay: LocalTime
    +exceptions: List<LocalDate>?
    +validate(): void
  }

  enum RecurrenceType <<Enum>> VALUE_OBJECT_COLOR {
    NONE
    DAILY
    WEEKLY
    MONTHLY
    CUSTOM
  }

  enum TaskStatus <<Enum>> VALUE_OBJECT_COLOR {
    SCHEDULED
    PAUSED
    COMPLETED
    FAILED
  }

  class SchedulerService <<DomainService>> SERVICE_COLOR {
    +scheduleTask(task: ScheduleTask): void <<Throws SchedulingException>>
    +rescheduleTask(task: ScheduleTask): void
    +cancelTask(taskId: String): void
    +executeDueTasks(): void
  }

  interface ScheduleRepository <<Repository>> REPOSITORY_COLOR {
    +findByNotificationId(notificationId: String): List<ScheduleTask>
    +findDueTasks(now: LocalDateTime): List<ScheduleTask>
    +save(task: ScheduleTask): ScheduleTask
    +delete(taskId: String): void
  }

  ' Exceptions
  class InvalidScheduleException <<Exception>> VALUE_OBJECT_COLOR
  class SchedulingException <<Exception>> VALUE_OBJECT_COLOR

}

' Relationships
ScheduleTask *-- SchedulePattern
SchedulerService --> ScheduleRepository : uses
ScheduleRepository ..> ScheduleTask
@enduml